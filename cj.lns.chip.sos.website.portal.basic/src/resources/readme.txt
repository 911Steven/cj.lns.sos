＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊框架目录结构、概念定义及作用说明＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

> portal（门户）：门户是自有插件集的面向业务领域的系统，如：动客、地理微博、交友网，每个这样的门户提供各自的插件市场。
  注：插件在整个插件系统中是唯一的，这是因为采用了
  插件的guid作为唯一标识，如果欲在不同的门户中使用同一插件，可以将guid改为不同值
> scene（场景）：场景类似于eclipse的透视图功能，由一组插件用于场景渲染，它是门户的插件子集，用于面向用户的使用习惯和用途。
  如：教师想在动客门户下使用文教类场景。
  一个场景t，是t在不同终端场景下的统称。
> canvas（画布）：画布用于渲染一个场景，一个场景有且仅有一个画布。那么如何处理多布局呢？解决办方法是：
  >> 可以定义插件集相同的场景多个，而每个场景可有一个定制的画布，这表现为多布局效果。
  >> 可能采用js对一个固定的场景画布进行布局微调。
> theme（主题）：主题在一个门户下的同一类终端下是共享的，每个场景的画布应根据主题设计，这是因为，eclipse支持透视图，却使用相同的主题

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊目录结构＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

> 场景和画布在resources目录下定义，说明如下：
  >> .scene是场景
  >> .canvas是画布
  >>二级扩展名代表终端类型，主名代表场景名，如：
    >>> lns.mobile.scene 表示移动终端，场景名为lns，对应的画布为:lns.mobile.canvas
    >>> lns.browser.scene 表示浏览器，场景名为lns，对应的画布为：lns.browser.canvas
    如果没有二级扩展名，即没有终端类型，表示默认为browser类型
 
  >> 主题目录 themes其下是终端类型名作为目录，有：browser,mobile,cellphone,pc,pad等，终端类型名目录之下是主题名。
     画布在渲染时，会根据画布的终端类型到主题目录中找相同终端类型下的主题。
  >> api目录：是通用的js框架。
> 画布和css均可使用开放资源，开放资源在sos.website的resources根目录下，只要是在此目录下的资源，均为开放资源。不需要登录也可使用。
> plugin关键字：它用于将当前的资源声明成使用插件的资源，会被controlContext.html()方法编译
  >> part关键字：用于内联其它html文件，内联文件同样可以使用plugin和part关键字，但在使用part时，必须同时指定plugin关键字